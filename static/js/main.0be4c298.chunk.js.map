{"version":3,"sources":["budgetData.ts","BudgetItems.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Frequency","budgets","id","name","startingAmount","startDate","lineItems","BudgetItems","Home","BudgetContainer","map","props","key","BudgetItem","navigate","useNavigate","BudgetStyle","onClick","handleGotoBudget","styled","ul","li","Header","Link","MainContainer","div","About","NotFound","App","to","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAwBKA,E,uEAAAA,O,qBAAAA,I,iBAAAA,I,mBAAAA,I,4BAAAA,I,sBAAAA,M,KAQE,IAAMC,EAAoB,CAC/B,CACEC,GAAI,IACJC,KAAM,UACNC,eAAgB,IAChBC,UAAW,WACXC,UAAW,KChCAC,EAJK,WAClB,OAAO,6C,2mCCIT,IAcMC,EAAO,WACX,OACE,oCACE,kBAACC,EAAD,KACGR,EAAQS,KAAI,SAAAC,GAAK,OAChB,kBAAC,EAAD,eAAYC,IAAKD,EAAMT,IAAQS,UAWnCE,EAAa,SAAC,GAA0B,IAAxBX,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KACpBW,EAAWC,cACf,OACE,kBAACC,EAAD,CAAaJ,IAAKV,EAAIe,QAAS,kBAPV,SAACf,EAAYY,GACpCA,EAAS,UAAD,OAAWZ,IAMoBgB,CAAiBhB,EAAIY,KACvDX,IAKDM,EAAkBU,IAAOC,GAAV,KAIfJ,EAAcG,IAAOE,GAAV,KAaXC,EAASH,YAAOI,IAAPJ,CAAH,KAYNK,EAAgBL,IAAOM,IAAV,KAKbC,EAAQ,WACZ,OAAO,sCAGHC,EAAW,WACf,OAAO,kDAGMC,EAjFH,WACV,OACE,kBAACJ,EAAD,KACE,kBAACF,EAAD,CAAQO,GAAG,KAAX,mBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,kBAAC,EAAD,QACzB,kBAAC,IAAD,CAAOD,KAAK,aAAaC,QAAS,kBAAC,EAAD,QAClC,kBAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,kBAAC,EAAD,QAC7B,kBAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,kBAAC,EAAD,WCHbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0be4c298.chunk.js","sourcesContent":["export interface Budget {\r\n  id: string;\r\n  name: string;\r\n  startingAmount: number;\r\n  startDate: string;\r\n  lineItems: LineItem[];\r\n}\r\n\r\nexport interface LineItem {\r\n  id: string;\r\n  title: string;\r\n  budgetID: string;\r\n  dayOfMonth?: number;\r\n  scheduleTypeId: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ScheduleType {\r\n  id: string;\r\n  dayOfMonth: number;\r\n  dayOfWeek: string;\r\n  frequency: Frequency;\r\n}\r\n\r\nenum Frequency {\r\n  \"OneTime\",\r\n  \"Daily\",\r\n  \"Weekly\",\r\n  \"Bi-Weekly\",\r\n  \"Monthly\"\r\n}\r\n\r\nexport const budgets: Budget[] = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Default\",\r\n    startingAmount: 600,\r\n    startDate: \"2/2/2020\",\r\n    lineItems: []\r\n  }\r\n];\r\n","import React from \"react\";\r\n\r\nconst BudgetItems = () => {\r\n  return <h4>Budget Items</h4>;\r\n};\r\n\r\nexport default BudgetItems;\r\n","import React from \"react\";\nimport { Link, Routes, Route, useNavigate } from \"react-router-dom\";\nimport { budgets, Budget } from \"./budgetData\";\nimport BudgetItems from \"./BudgetItems\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <MainContainer>\n      <Header to=\"/\">Budget Doctor $</Header>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"budget/:id\" element={<BudgetItems />} />\n        <Route path=\"about\" element={<About />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </MainContainer>\n  );\n};\n\nconst Home = () => {\n  return (\n    <>\n      <BudgetContainer>\n        {budgets.map(props => (\n          <BudgetItem key={props.id} {...props} />\n        ))}\n      </BudgetContainer>\n    </>\n  );\n};\n\nconst handleGotoBudget = (id: string, navigate: Function) => {\n  navigate(`budget/${id}`);\n};\n\nconst BudgetItem = ({ id, name }: Budget) => {\n  let navigate = useNavigate();\n  return (\n    <BudgetStyle key={id} onClick={() => handleGotoBudget(id, navigate)}>\n      {name}\n    </BudgetStyle>\n  );\n};\n\nconst BudgetContainer = styled.ul`\n  list-style-type: none;\n`;\n\nconst BudgetStyle = styled.li`\n  background-color: #f4b15e;\n  border: solid 0px white;\n  padding: 1em 2em;\n  text-transform: uppercase;\n  letter-spacing: 0.5rem;\n  font-size: 1.3rem;\n  box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.02),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05),\n    0 100px 80px rgba(0, 0, 0, 0.07);\n`;\n\nconst Header = styled(Link)`\n  padding: 1rem;\n  font-style: italic;\n  font-size: 1.5rem;\n  font-weight: bold;\n  border: solid 0px white;\n  box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.02),\n    0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035),\n    0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05),\n    0 100px 80px rgba(0, 0, 0, 0.07);\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst About = () => {\n  return <h4>About</h4>;\n};\n\nconst NotFound = () => {\n  return <h4>Not here, sucker!</h4>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}